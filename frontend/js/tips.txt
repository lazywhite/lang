javascript是弱类型语言
    list
    json
    function

js变量命名规则与java一致

js 变量声明不初始化， 则为'undefined'
js element.value 默认全部是字符串

js类型转换
    parseInt()
    parseFloat()
    var.toString()
    a = "100"; b = a - 0;
    c = 100; d = c + "";
强制类型转换
    var b1 = Boolean("abc");
    var n1 = Number(false);
    var s1 = String(null) //与toString()不同的是可以转换null与undefined值
    var s1 = String(undefined)

js基本类型
    undefined
    Boolean
    Number
    String
    null
js符合数据类型
    object
    Function
    Array

true == 1 --> true
false == 0 --> true

var iOctNum = 0123; //定义8进制数字
var iHexNum = 0x123;//定义16进制数字
var iFloat = 1.23;
isNaN(var) 用来测试是否为一个数字
var iNum = 123; //十进制
iNum.toString(2); //转换为二进制
iNum.toString(8); //转换为八进制
iNum.toString(16); //转换为十进制
parseInt("string", [2, 8, 16]);//字符串解析为对应进制的数字


function sum(){ //定义可接受变长参数的函数
    var sum = 0;
    for(var i=0;i<arguments.length;i++){
        sum += arguments[i];
    }
    return sum
}

//创建一个对象
var st = new Object; 
st.name = "akdjf";
st.age = 100;

因为js是弱类型语言， 因此不存在函数重载

关键字
    instanceof
    null
    true false
    NaN
    typeof 

內建构造函数
    Array()
    String()
    Math()
    Date()
    Number()

js 运算符
    比较运算符
    算术运算符
    逻辑运算符
    赋值运算符

终止函数
	return， 
终止循环
	break continue
终止程序
	暂无


java 变量类型
	局部变量
	类变量（静态变量）
	成员变量

final 变量无法修改， 方法不能被重写， 类不能有子类
final无法修饰interface， 无法跟abstract， strictfp一起使用

Java语言包含三种核心机制：Java 虚拟机、垃圾收集机制和代码安全检测
1、Java 虚拟机(Java Virtual Machine，JVM)
在一台计算机上由软件或硬件模拟的计算机。Java虚拟机读取并处理经编译过的平台无关的字节码class文件。
2、垃圾收集机制(Garbage collection)
在C/C++ 等语言中，由程序员负责回收无用内存。Java语言解除了程序员回收无用内存空间的责任。它提供一种系统级线程跟踪存储空间的分配情况。并在JVM的空闲时，检查并释放那些可被释放的存储器空间。垃圾收集在Java程序运行过程中自动进行，程序员无法精确控制和干预。  
3、代码安全性检测(Code Security)
Java执行代码的时候，由JVM对运行的代码进行安全性检测，当进行一些非法操作的时候，比如修改一些系统设置的时候，JVM会发出警告。
--------
抽象类可以implements interface
Methods in interfaces are implicitly public
--------
接口可以继承多个接口
class可以实现多重接口

js一切皆对象
js 继承
	构造函数 + prototype

正则表达式
    var reg1 = new RegExp("^i\w*$", "gi"); //i表示不区分大小写，g表示应用于整个str
    var reg2 = /a\wb/gi; //另外一种定义正则表达式的方法
    var str = "addddb";
    reg1.test(str);
    reg2.test(str);

    var s = "axbcdaybx";
    s.replace(reg2, "ok") --> "okcdaybx"


    var regPhone = /^o\d{2,3}\-\d{7,8}$/;   //座机号码正则
    var regEmail = /^(\w+\.?)*\w+@\w+\.\w+/; //email正则

ajax: async javascript and xml, 应用到XMLHTTPRequest技术
$.ajax({
    async: true|false,
    url: "upload.jsp",
    type: "GET|POST", //请求方法
    data: {name: "bob", age: 12},  //被转换成requestParam添加到url后面
    dataType: json|xml, //返回的数据类型
    success: function(){}, //成功的回调
    error: function(){}, //失败的回调
})

js静态对象
    Date
    String
    Math
    Array
    Number
    RegExp
    Boolean

typeof <>  --> 'number', 'string', 'boolean'

js中的数组可以是任何元素, 初始化值是undefined
js没有块级语句之分，在块内定义的元素， 外面也可以用
js有全局变量和局部变量之分

定义函数
    function test(){}
        函数调用可在定义之后
    var test = function(){}
        函数调用必须在定义之后
    var test = new Function("arg1","arg2"... "alert(arg1+arg2)")
    (function(a){alert(a);})(100);
函数没有返回值， 则函数调用的结果是undefined
函数内部调用变量早于定义， 则返回undefined， 不会去找同名全局变量

//定义一个对象
var p = {
    name: "bob", 
    age: 10
    show: function(){
        console.log(this.name + this.age)
    }
}
p.age || p['age'] 访问属性

function Person(name, age){
    this.name = name;
    this.age = age;
}
Person.prototype.show = function(){
    console.log(this.name + this.age)
}
