javascript是弱类型语言
    list
    json
    function

js变量命名规则与java一致

js 变量声明不初始化， 则为'undefined'
js element.value 默认全部是字符串

js类型转换
    parseInt()
    parseFloat()
    var.toString()
    a = "100"; b = a - 0;
    c = 100; d = c + "";
强制类型转换
    var b1 = Boolean("abc");
    var n1 = Number(false);
    var s1 = String(null) //与toString()不同的是可以转换null与undefined值
    var s1 = String(undefined)

js基本类型
    undefined
    Boolean
    Number
    String
    null
js复合数据类型
    object
    Function
    Array

true == 1 --> true
false == 0 --> true

var iOctNum = 0123; //定义8进制数字
var iHexNum = 0x123;//定义16进制数字
var iFloat = 1.23;
isNaN(var) 用来测试是否为一个数字
var iNum = 123; //十进制
iNum.toString(2); //转换为二进制
iNum.toString(8); //转换为八进制
iNum.toString(16); //转换为十进制
parseInt("string", [2, 8, 16]);//字符串解析为对应进制的数字


function sum(){ //定义可接受变长参数的函数
    var sum = 0;
    for(var i=0;i<arguments.length;i++){
        sum += arguments[i];
    }
    return sum
}

//创建一个对象
var st = new Object(); 
st.name = "akdjf";
st.age = 100;

因为js是弱类型语言， 因此不存在函数重载

关键字
    instanceof
    null
    true false
    NaN
    typeof 

js 对象
    Array()
        var arr = new Array();
    Number()
        var a = new Number(10);
    String()
        var str = new String("bob");
    Date()
        var d = new Date();
         var msecs = Date.parse( "Aug 28, 2008 23:30:00" );
    Math
        var a = Math.abs(-100);
    RegExp
        var pattern = new RegExp(pattern, attributes);
        var pattern = /pattern/attributes;

var s = "string"; console.log(typeof s) --> string
var s = new String("string"); console.log(typeof s) --> object
js 运算符
    比较运算符
    算术运算符
    逻辑运算符
    赋值运算符

终止函数
	return
终止循环
	break continue
终止程序
	暂无

js无法退出脚本

js 继承
	构造函数 + prototype

正则表达式
    var reg1 = new RegExp("^i\w*$", "gi"); //i表示不区分大小写，g表示应用于整个str
    var reg2 = /a\wb/gi; //另外一种定义正则表达式的方法
    var str = "addddb";
    reg1.test(str);
    reg2.test(str);

    var s = "axbcdaybx";
    s.replace(reg2, "ok") --> "okcdaybx"


    var regPhone = /^o\d{2,3}\-\d{7,8}$/;   //座机号码正则
    var regEmail = /^(\w+\.?)*\w+@\w+\.\w+/; //email正则

ajax: async javascript and xml, 应用到XMLHTTPRequest技术
$.ajax({
    async: true|false,
    url: "upload.jsp",
    type: "GET|POST", //请求方法
    data: {name: "bob", age: 12},  //被转换成requestParam添加到url后面
    dataType: json|xml, //返回的数据类型
    success: function(){}, //成功的回调
    error: function(){}, //失败的回调
})

typeof <>  --> 'number', 'string', 'boolean'

js中的数组可以是任何元素, 初始化值是undefined
js没有块级语句之分，在块内定义的元素， 外面也可以用
js有全局变量和局部变量之分

定义函数
    function test(){}
        函数调用可在定义之后
    var test = function(){}
        函数调用必须在定义之后
    var test = new Function("arg1","arg2"... "alert(arg1+arg2)")
    (function(a){alert(a);})(100);
函数没有返回值， 则函数调用的结果是undefined
函数内部调用变量早于定义， 则返回undefined， 不会去找同名全局变量

//定义一个对象
var p = {
    name: "bob", 
    age: 10
    show: function(){
        console.log(this.name + this.age)
    }
}
p.age || p['age'] 访问属性

构造函数
function Person(name, age){
    this.name = name;
    this.age = age;
}
公共函数
Person.prototype.show = function(){
    console.log(this.name + this.age)
}

    
var s = '{"name":"bob"}'
var obj = JSON.parse(s)
JSON.stringify(obj)


window.location
	host : "192.168.33.125:1234"
	hostname : "192.168.33.125"
	href : "http://192.168.33.125:1234/"
	origin : "http://192.168.33.125:1234"
	pathname : "/"
	port : "1234"
	protocol : "http:"


自动刷新当前页面
    setInterval("location.reload()", 3000);

刷新页面的方法
    history.go(0)
    window.navigate(location)
    document.url = location.href

根据属性名设置值
    obj = {}
    var attr = "name"
    obj[attr] = 10

list操作
    list.push(element)
    list.sort(function(a, b){return a-b})number数组正向排序, 
    list.reverse()反向排序
    [...new Set(arr)] 去重

    删除特定的元素
        var index  = list.indexOf(element)
        list.splice(index, 1)
    pop()只能删除最末尾的元素

    list.filter(h=>{
        if(condition){
            return true;
        }else{
            return false;
        }
    });
    

float精确位
    a = 1.2345
    a.toFixed(2)

获取昨天时间
    var curDate = new Date();
    var preDate = new Date(curDate.getTime() - 24*60*60*1000); //前一天
    var nextDate = new Date(curDate.getTime() + 24*60*60*1000); //后一天
