函数无法返回多个值, 可以通过定义struct来返回
函数无法设置参数默认值
局部变量必须手动初始化, 全局变量会被自动初始化
__packed: 结构体字节对齐

volatile可以防止编译器优化直接从寄存器而不是变量地址读取而造成的数据不一致情况
c没有boolean类型, 0代表false, 大于0代表true

c不区分整除和除法, 只有一个'/'运算, a/b a,b均为整数为整除, 有浮点为实除

设NULL值
    int a = NULL;


int i=1,2,3; // compile error
int i=(1,2,3); // i=3
int i; i=1,2,3;// i=1

#define N 2+3
则 N * N 会被替换为  2+3 * 2+3

Boolean
    #include <stdbool.h>
    int main()
    {
      bool b = false;
      b = true;
    }

数据基本类型
    char
    int
    float
    double
    void

类型修饰符
    unsigned
    short
    long
    

int max(int, int) // 函数声明, 可以不带形参
函数在调用之前必须有声明


在所有function之外定义的变量为全局变量
作为参数传递的变量优先级高于全局变量

字符串
    是以'\0'结尾的char数组
    char greeting[] = "hello";
    printf("string is %s", greeting);

    strcpy(s1, s2) //拷贝
    strcat(s1, s2) //拼接
    strlen(s1) //长度
    strcmp(s1) //比较内容, 与指针和长度无关, 相同返回0
        hello > aello
        hello < zello
    strchr(s1, ch)  // 返回第一个出现在s1中ch的指针
    strstr(s1, s2)  // 返回第一个出现在s1中s2的指针


printf
    double %lf
    float %f
    int %d
    pointer %p
    enum %d
    char[] %s
    %%s  // % escape 

函数调用
    call by reference 
    call by value

定义常量
    const int a = 10; 
    #define PI 3.14

storage class
    auto
        本地变量默认, 可以省略
    register
        变量存储在寄存器中, 而不是内存中, 因此没有内存地址
    static
        本地变量不会在每次调用后销毁
        全局变量默认可以被extern, 但用static修饰后无法被extern, 只在声明的文件内有效
    extern
        声明全局变量或函数, 在其他文件中包含实现

枚举
    字面虽然是字符串, 但按int存储, 编译时会被丢弃
    enum WeekDay{
        MON = 4,
        TUE,
    };
    enum WeekDay day = TUE;
    printf("day is %d", day);  //enum类型值为整数, 第一个元素默认为0


数组
    double balance[3] = {1.23, 1.1, 2.2}; // 3为数组size

    int arr[] = {1, 2, 3};
    int size = sizeof(arr)/sizeof(*arr); //获取数组长度, 无法独立成函数


指针
    int temp = 10;
    int* p; p = &temp; //整数指针
    int** q; q = &p; //整数指针的指针

    int* ptr[5]; //指针数组
    int balance[5]; //balance为数组指针
    指针参数
        void getSeconds(int* par);
        int a = 10;
        getSeconds(&a); 
    返回指针
        int* getRandom(){
            static int r[10];
            int i;
            srand((unsigned) time(NULL));
            for(i=0;i<10;i++){
                r[i] = rand();
            }
            return r;
        }

    int* ptr = NULL; //空指针

结构体
    struct Book{
        char author[100]; //必须指定size
        float price; 
    };
    struct Book book;
    //第一种初始化方法
    strcpy(book.author, "stevee"); //不能直接赋值, 必须用strcpy
    book.price = 11.24;
    //第二种初始化方法
    struct Book book2 = {.author = "bob", .price = 1.24};

    //自定义类型
    typedef struct Book MyBook;
    MyBook book3;

    typedef struct{
        int age;
    }Student; //struct name可以省略

    //结构体指针
    struct Book* ptr;
    ptr = &book2;
    printf("%f", book2->price); //结构体指针访问属性使用'->'

    结构体无法直接print所有fields, 必须要指定field

union
    里面的member同时只能有一个正常存储值
    union Data{
        int a;
        float b;
    } data;
    data.a = 10;
    data.b = 20.1;

typedef与#define
    #define 1 ONE, typedef 无法实现
    #define在预编译阶段处理, typedef在编译阶段处理

c语言动词
    #include
    #define
