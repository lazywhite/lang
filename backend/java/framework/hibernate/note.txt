intelliji View
    tool window
        database
            add new datasource
        persistence
            generate persistence mapping
                by database schema
使用persistence自动生成entity及mapping文件
    1. 生成后的mapping.xml class必须含有id属性, 并且放在最开始
    2. 注意hibernate.cfg.xml是否丢失用户名,密码配置

hibernate.cfg.xml
    hibernate-configuration
        session-factory
            property @name 
            mapping @resource
                @package  //需要注解支持
User.hbm.xml
    hibernate-mapping @package
        class @name @table @schema
            id
                generator @class
                    assigned: 自己指定
                    increment: hibernate自己max() + 1
                    native: 采用数据库自身能力自增
                        mysql: auto_increment
                        oracle: sequence
                        sqlserver: identity
            property @name @column
                @type
                    java.lang.Integer or integer(hibernate简写类型)

            many-to-one //正向映射
                @unique = "true" 一对一映射, 此列不允许重复
                @name = student
                @class = Student
                @column = sid
                @cascade 级联操作, 配置在多方
                    如果保存子表记录时, 父表记录不存在, 则先创建父表记录, 再添加子表记录
            one-to-one //反向映射
                @name
                @class
                @property-ref
                @cascade
                    delete
                    save-update
                    none
                    all
            set //配置在父表
                //lazy=true时, 不能配置fetch=join
                @name
                @cascade
                @lazy  延迟加载, 用时才查询
                @inverse 由子表维护映射关系, 否则会自己去update子表的gid
                @fetch
                    join 表连接进行查询, 只有1条sql
                    select 分成两条sql查询
                    subselect 
                key @column
                one-to-many @class

基于interceptor的hibernate事务

关系属性4要素
    关系属性名
    关系属性类
    外键列名
    cascade

映射类型
    单向1-1
        基于外键
        基于中间表
        基于主键
    单向1-N
        基于N表外键
        基于中间表
    单向N-1
        基于N表外键
        基于中间表
    单向N-N
        基于中间表
    双向1-1
        基于外键
        基于中间表
        基于主键
    双向1-N
        基于N表外键
        基于中间表
    双向N-N
        基于中间表

延迟加载
    类级别 <class lazy="true>
        get() 立即加载发送sql
        load() 默认是延迟加载,用的时候才发sql,取得的对象是代理类型
    关联级别
        <set lazy="true">

对象状态
    临时态(瞬时态)
        刚new出来的状态, 有可能被gc, 表中没有对应记录, 不被session管理
    持久态
        不能被gc, 被session管理(处于一级缓存区), 表中有对应记录
        session.save()
        session.saveOrUpdate()
        session.persist()
    游离态
        对象不被session管理, 可以被gc
        session.close()
        session.clear()
        session.evict()

一级缓存(session级别)
    缓存不能跨session访问
    事务提交, session缓存自动被清空
    通过session.clear(),session.evict(obj)来清空缓存
二级缓存(sessionFactory级别, 必须是同一个factory)
    默认关闭
    多个session可共享数据
    只提供单服务器二级缓存
    事务提交后, 默认清理缓存, 避免脏读
    开启方法
        引入jar包
        hibernate.cfg.xml设置Provider
        ehcache.xml 配置参数
        mapping.xml cache region
查询缓存
    通过hql语句得到的数据可以使用
    开启方法
        缓存对象可序列化
        开启二级缓存
        开启查询缓存功能
        query.setCacheable(true)

批量操作
    session.save(obj)
    session.flush() 持久化
    session.clear() 清空缓存

JPA是一个接口, hibernate实现了这些接口
Annotation
    @Entity: 标记为实体类, 必须含有无参构造
    @Table(name="person")
    @Id: primary key, 自动识别主键生成策略, 用@GeneratedValue来覆盖
    @Column(name="col", length="", nullable, unique)
