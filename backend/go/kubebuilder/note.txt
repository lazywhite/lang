quickstart
    doc
        https://book.kubebuilder.io/quick-start.html

    mkdir example
    cd example; go mod init github.com/lazywhite/example
    kubebuilder init --domain my.domain
    kubebuilder create api --group batch --version v1 --kind CronJob
        --namespaced false 可以创建集群类型资源
    # 可能会报错，根据错误提示，需要安装logr, ginkgo, gomega
        可以选择只生成crd resource，不生成controller代码

    /PROJECT下记录了domain, group, kind



make manifests # 更新spec, status后重新生成crd
目前不支持更新spec， status后， 自动生成config/sample/

报type <> has no field or method DeepCopyInto, 说明没有为struct自动生成DeepCopyInto方法, 可能struct名称开头不是大写


status内包含map， r.Status().Update()无法更新的问题


controller-gen注释文档
    https://book.kubebuilder.io/reference/markers/crd.html

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description="The appInstance running status"
// +kubebuilder:printcolumn:name="Progress",type="string",JSONPath=".status.progress",description="progress"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.message",description="message"
// +kubebuilder:resource:shortName=boc,scope=Cluster  # 必须写在一行，否则只有最后一行生效

type CronJob struct{

    // +kubebuilder:validation:Optional    表示该字段可以留空，不进行schema校验
    // omitempty: mark that a field should be omitted from serialization when empty.
    // 避免出现client-go提交CR时，类似spec.accessibility.from.ipBlock.except in body must be of type array: "null"的错误

    Name string `json:"name,omitempty"`
}


更新Status, Spec某些字段的类型时， 如果集群已存在CR，会报类型错误，"reflect.go expected, found" 需要全部删掉cr


scale 子资源
    https://kubernetes.io/zh/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/
    // +kubebuilder:subresource:scale
    可以用kubectl scale来进行水平自动扩容



create resource时不能设置ResourceVersion, update resource一定要加上ResourceVersion而且要跟老的Resource一样，否则无法update



=========== 没有gnostic openAPIv2错误的最高版本 ==============

require (
    k8s.io/api v0.19.0
    k8s.io/apimachinery v0.19.0
    k8s.io/client-go v0.19.0
)




====== controller内部组件和工作原理 ======
原理
    kube-proxy, kubelet, controller-manager, scheduler都是基于Http chunked长连接方式来
    ListWatch kube-api-server, 将返回的event放进queue中进行处理
组件
    1. k8s官方基于client-go实现的controller
        SharedIndexerInformer
            Indexer
                Cache
                    ThreadSafeStore
            ListWatcher
            Processor
            Controller
                Queue
                    FIFO

    2. kubebuilder基于controller-runtime实现的controller



====== operator与controller的区别 ======
1. controller负责resource达到声明的状态，比如deployment pod数量不足时创建新的pod
2. operator只是提交操作，类似于kubectl, 底层工作还是由controller来做
