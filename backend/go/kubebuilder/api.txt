========== list ===========
podList := &v1.PodList{}
err = r.Client.List(ctx, podList, client.InNamespace(v1.NamespaceAll), client.MatchingFields{".spec.nodeName": nodeName})
err = r.Client.List(ctx, podList, client.InNamespace(v1.NamespaceAll), client.MatchingLabels{".spec.nodeName": nodeName})


========== get ===========
pvc := &v1.PersistentVolumeClaim{}
PVCNN := types.NamespacedName{Name: PVCName, Namespace: PVCNamespace}
err := r.Client.Get(ctx, PVCNN, pvc)

========== delete ===========
newPVC := pvc.DeepCopy()
ctx := context.TODO()
err := r.Client.Delete(ctx, pvc)


========== create ===========
pod := &v1.Pod{
	ObjectMeta: metav1.ObjectMeta{
		Name:        name,
		Namespace:   namespace,
		Annotations: annotations,
	},
	Spec: v1.PodSpec{
		ServiceAccountName: serviceAccountName,
		Containers: []v1.Container{
			{
				Name:            "main",
				Image:           image,
				ImagePullPolicy: v1.PullIfNotPresent,
				Command:         command,
				Resources:       resources,
				Env:             envs,
			},
		},
		TerminationGracePeriodSeconds: &gracePeriod,
		RestartPolicy:                 "Never",
		Tolerations:                   tolerations,
	},
}
err := r.Client.Create(ctx, pod)


========== update cr status ===========
myKind.Status.ReadyReplicas = deployment.Status.ReadyReplicas
if r.Client.Status().Update(ctx, &myKind); err != nil {
	log.Error(err, "failed to update MyKind status")
	return ctrl.Result{}, err
}

========== update cr ===========
deployment.Spec.Replicas = &expectedReplicas
if err := r.Client.Update(ctx, &deployment); err != nil {
	log.Error(err, "failed to Deployment update replica count")
	return ctrl.Result{}, err
}


